[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Corces Lab @ Gladstone Institutes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/CHOIR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"CHOIR","text":"install package, please use following:","code":"remotes::install_github(\"corceslab/CHOIR\", ref=\"main\", repos = BiocManager::repositories(), upgrade = \"never\")"},{"path":"/articles/CHOIR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CHOIR","text":"vignette provides basic example run CHOIR, clustering algorithm single-cell sequencing data. CHOIR applicable single-cell sequencing data modality, including RNA, ATAC, proteomics. also applicable multi-modal data (see Advanced Options). CHOIR based premise clusters contain biologically different cell types states, machine learning classifier considers features present cells cluster able distinguish clusters higher level accuracy machine learning classifiers trained randomly permuted cluster labels. use permutation testing approaches allows CHOIR introduce statistical significance thresholds clustering process. CHOIR proceeds two main steps. First, CHOIR generates hierarchical clustering tree spanning network structure data initial “partition” cells cluster partition cells demonstrably overclustered. , CHOIR applies permutation testing approach using random forest classifiers across nodes hierarchical clustering tree determine appropriate extent branch clustering tree, final clusters represent statistically distinct populations. ’ll need following packages installed run tutorial:","code":"library(CHOIR) library(Seurat) library(scRNAseq)"},{"path":"/articles/CHOIR.html","id":"example-data","dir":"Articles","previous_headings":"Introduction","what":"Example data","title":"CHOIR","text":"demonstrate run CHOIR single-cell RNA-seq dataset, ’ll use small dataset consisting mouse dopaminergic neurons, originating experiment La Manno et al. (2016), available Bioconductor package scRNAseq.","code":"data_matrix <- LaMannoBrainData('mouse-adult')@assays@data$counts colnames(data_matrix) <- seq(1:ncol(data_matrix))"},{"path":"/articles/CHOIR.html","id":"pre-processing","dir":"Articles","previous_headings":"Introduction","what":"Pre-processing","title":"CHOIR","text":"CHOIR takes input Seurat, SingleCellExperiment, ArchR object containing one feature matrices. Input data already undergone appropriate quality control normalization steps (unless using SCTransform, see Advanced Options). Note exact pre-processing steps used user. tutorial uses Seurat object; details related object types, see Advanced Options. First, create Seurat object using read count matrix. simplicity, ’ll just exclude cells fewer 100 reads genes present less 5 cells. now run log normalization.","code":"seurat_object <- CreateSeuratObject(data_matrix,                                      min.features = 100,                                     min.cells = 5) seurat_object <- NormalizeData(seurat_object)"},{"path":"/articles/CHOIR.html","id":"running-choir","dir":"Articles","previous_headings":"","what":"Running CHOIR","title":"CHOIR","text":"CHOIR proceeds two main steps: CHOIR generates hierarchical clustering tree. CHOIR prunes tree iterative application permutation testing approach. two steps can run together using function CHOIR() separately using functions buildTree() pruneTree().","code":""},{"path":"/articles/CHOIR.html","id":"quick-start","dir":"Articles","previous_headings":"Running CHOIR","what":"Quick start:","title":"CHOIR","text":"CHOIR() function run steps CHOIR algorithm sequence. CHOIR highly parallelized, efficiency greatly improves n_cores increased. default significance level used CHOIR \\(\\alpha = 0.05\\) Bonferroni multiple comparison correction. correction methods may less conservative, CHOIR applies filters reduce total number tests performed (see Advanced Options).","code":"seurat_object <- CHOIR(seurat_object,                         n_cores = 2)"},{"path":"/articles/CHOIR.html","id":"step-by-step","dir":"Articles","previous_headings":"Running CHOIR","what":"Step-by-step:","title":"CHOIR","text":"Alternately, can run two main steps CHOIR individually. users already set clusters generated different tool, wish assess whether clusters - -clustered, start Step 2 (see Advanced Options).","code":""},{"path":"/articles/CHOIR.html","id":"step-1-generate-hierarchical-clustering-tree","dir":"Articles","previous_headings":"Running CHOIR > Step-by-step:","what":"Step 1: Generate hierarchical clustering tree","title":"CHOIR","text":"CHOIR generates hierarchical clustering tree computing dimensionality reduction nearest neighbor adjacency matrices data, computing clusters across series sampled resolutions, reconciling clustering results consensus clustering tree using package MRtree. using default parameter max_clusters = 'auto', CHOIR applies series subclustering steps ensure tree underclustered. Specifically, silhouette score assessed new level emerging tree. silhouette score maximized, cluster level subset, new dimensionality reduction generated, cluster subclustered. subtrees continues subdivided farthest pair nearest neighboring clusters found overclustered using permutation test approach. user can determine method used dimensionality reduction batch correction, well supply specific parameters dimensionality reduction, batch correction, detecting nearest neighbors, modularity-based clustering, needed. , build hierarchical clustering tree using default parameter settings.","code":"seurat_object <- buildTree(seurat_object,                            n_cores = 2) #>  #> Input data: #>  - Object type: Seurat (v5) #>  - # of cells: 243 #>  - # of modalities: 1 #>  #> Proceeding with the following parameters: #>  - Intermediate data stored under key: CHOIR #>  - Normalization method: none #>  - Subtree dimensionality reductions: TRUE #>  - Dimensionality reduction method: Default #>  - # of variable features: Default #>  - Batch correction method: none #>  - Maximum clusters: auto #>  - Minimum cluster depth: 2000 #>  - Distance approximation: TRUE #>  - Alpha: 0.05 #>  - Multiple comparison adjustment: bonferroni #>  - Features to train RF: var #>  - # of excluded features: 0 #>  - # of permutations: 100 #>  - # of RF trees: 50 #>  - Use variance: TRUE #>  - Minimum accuracy: 0.5 #>  - Minimum connections: 1 #>  - Maximum repeated errors: 20 #>  - Maximum cells sampled: Inf #>  - Downsampling rate: 1 #>  - # of cores: 2 #>  - Random seed: 1 #> 2023-10-20 13:08:46 : (Step 1/6) Running initial dimensionality reduction.. #>                       Preparing matrix using 'RNA' assay and 'data' slot.. #>                       Running PCA with 2000 variable features.. #> 2023-10-20 13:08:47 : (Step 2/6) Generating initial nearest neighbors graph.. #> 2023-10-20 13:08:47 : (Step 3/6) Identify starting clustering resolution.. #>  #>                       Starting resolution: 0.4 #> 2023-10-20 13:08:47 : (Step 4/6) Building parent clustering tree.. #>  #>  #>                       Identified 3 clusters in parent tree. #> 2023-10-20 13:08:48 : (Step 5/6) Subclustering parent tree.. #> 2023-10-20 13:08:49 : 5% (Subtree 1/3, 112 cells), 3 total clusters. #> 2023-10-20 13:08:57 : 44% (Subtree 1/3, 112 cells), 7 total clusters. #> 2023-10-20 13:08:58 : 50% (Subtree 2/3, 84 cells), 7 total clusters. #> 2023-10-20 13:08:58 : 51% (Subtree 2/3, 84 cells), 7 total clusters. #> 2023-10-20 13:08:59 : 79% (Subtree 2/3, 84 cells), 9 total clusters. #> 2023-10-20 13:08:59 : 81% (Subtree 2/3, 84 cells), 9 total clusters. #> 2023-10-20 13:09:00 : 83% (Subtree 3/3, 47 cells), 9 total clusters. #> 2023-10-20 13:09:04 : 99% (Subtree 3/3, 47 cells), 13 total clusters. #>  #> 2023-10-20 13:09:04 : (Step 6/6) Compiling full clustering tree.. #>                       Full tree has 6 levels and 10 clusters."},{"path":"/articles/CHOIR.html","id":"step-2-prune-hierarchical-clustering-tree","dir":"Articles","previous_headings":"Running CHOIR > Step-by-step:","what":"Step 2: Prune hierarchical clustering tree","title":"CHOIR","text":"constructing hierarchical clustering tree, CHOIR iterates node clustering tree using bottom-approach. node, CHOIR computes pairwise comparisons child clusters splitting cells training test sets, training balanced random forest classifier gene expression data training set, predicting cluster assignments cells test set. yields prediction accuracy score represents degree two clusters distinguishable. parallel, CHOIR shuffles cluster labels repeats process. comparisons repeated using bootstrapped samples (default = 100 iterations), resulting permutation test compares true prediction accuracy clusters prediction accuracy chance division cells two random groups. permutation test yields p-value determines whether clusters slated merge remain separate. significance threshold used can adjusted using alpha parameter.","code":"seurat_object <- pruneTree(seurat_object,                             n_cores = 2) #> 2023-10-20 13:09:04 : (Step 1/2) Preparing object.. #>  #> Input data: #>  - Object type: Seurat #>  - # of cells: 243 #>  - # of modalities: 1 #>  - # of subtrees: 4 #>  - # of levels: 6 #>  - # of starting clusters: 10 #>  #> Proceeding with the following parameters: #>  - Intermediate data stored under key: CHOIR #>  - Alpha: 0.05 #>  - Multiple comparison adjustment: bonferroni #>  - Features to train RF: var #>  - # of excluded features: 0 #>  - # of permutations: 100 #>  - # of RF trees: 50 #>  - Use variance: TRUE #>  - Minimum accuracy: 0.5 #>  - Minimum connections: 1 #>  - Maximum repeated errors: 20 #>  - Distance awareness: 2 #>  - Distance approximation: TRUE #>  - Maximum cells sampled: Inf #>  - Downsampling rate: 1 #>  - # of cores: 2 #>  - Random seed: 1 #> 2023-10-20 13:09:05 : (Step 2/2) Iterating through clustering tree.. #> 2023-10-20 13:09:08 : 11% (2/6 levels) in 0.06 min. 8 clusters remaining. #> 2023-10-20 13:09:09 : 20% (2/6 levels) in 0.07 min. 6 clusters remaining. #> 2023-10-20 13:09:13 : 32% (3/6 levels) in 0.15 min. 6 clusters remaining. #> 2023-10-20 13:09:15 : 40% (3/6 levels) in 0.17 min. 6 clusters remaining. #> 2023-10-20 13:09:15 : 50% (4/6 levels) in 0.17 min. 6 clusters remaining. #> 2023-10-20 13:09:19 : 60% (5/6 levels) in 0.24 min. 6 clusters remaining. #> 2023-10-20 13:09:35 : 70% (5/6 levels) in 0.51 min. 6 clusters remaining. #> 2023-10-20 13:09:38 : 80% (6/6 levels) in 0.56 min. 5 clusters remaining. #> 2023-10-20 13:09:46 : 91% (6/6 levels) in 0.7 min. 5 clusters remaining. #> 2023-10-20 13:09:47 : Checking for underclustering in 1 clusters. #> 2023-10-20 13:09:50 : Additional comparisons necessary. 5 clusters remaining. #> 2023-10-20 13:09:50 : Completed: all clusters compared. #>  #>  - In 2 comparisons, clusters were split due to the minimum number of nearest neighbor connections. #>  - In 1 comparisons, clusters were merged after correction for multiple comparisons. #>  - Final adjusted significance threshold = 0.00227. #>  #> 2023-10-20 13:09:50 : Identified 5 clusters."},{"path":"/articles/CHOIR.html","id":"plot","dir":"Articles","previous_headings":"Running CHOIR","what":"Plot","title":"CHOIR","text":"final clusters identified CHOIR can found meta.data slot Seurat object. CHOIR outputs stored misc slot Seurat object. clustering finished, can generate UMAP dimensionality reduction use function plotCHOIR() plot visualization clusters.  function also overlay prediction accuracy scores among neighboring pairs clusters accuracy_scores set TRUE.","code":"head(seurat_object@meta.data) #>      orig.ident nCount_RNA nFeature_RNA CHOIR_clusters_0.05 #> 1 SeuratProject       7826         3314                   3 #> 2 SeuratProject       3294         1895                   1 #> 3 SeuratProject       6776         3002                   2 #> 4 SeuratProject       7294         3192                   1 #> 5 SeuratProject       3747         1993                   1 #> 6 SeuratProject      11258         4363                   1 # Run UMAP seurat_object <- runCHOIRumap(seurat_object,                               reduction = \"P0_reduction\") #> Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric #> To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation' #> This message will be shown once per session #> 13:09:51 UMAP embedding parameters a = 0.9922 b = 1.112 #> Found more than one class \"dist\" in cache; using the first, from namespace 'spam' #> Also defined by 'BiocGenerics' #> 13:09:51 Read 243 rows and found 50 numeric columns #> 13:09:51 Using Annoy for neighbor search, n_neighbors = 30 #> Found more than one class \"dist\" in cache; using the first, from namespace 'spam' #> Also defined by 'BiocGenerics' #> 13:09:51 Building Annoy index with metric = cosine, n_trees = 50 #> 0%   10   20   30   40   50   60   70   80   90   100% #> [----|----|----|----|----|----|----|----|----|----| #> **************************************************| #> 13:09:51 Writing NN index file to temp file /var/folders/ty/d3bmlyq53cv_6t3v60wkfr980000gq/T//RtmpABnGgH/file96191d2a13c5 #> 13:09:51 Searching Annoy index using 1 thread, search_k = 3000 #> 13:09:51 Annoy recall = 100% #> 13:09:52 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30 #> 13:09:53 Initializing from normalized Laplacian + noise (using RSpectra) #> 13:09:54 Commencing optimization for 500 epochs, with 9286 positive edges #> 13:09:55 Optimization finished #> Warning: No assay specified, setting assay as RNA by default. # Plot plotCHOIR(seurat_object) #> Counts matrix provided is not sparse. Creating V5 assay in Seurat Object. plotCHOIR(seurat_object,           accuracy_scores = TRUE,           plot_nearest = FALSE) #> Counts matrix provided is not sparse. Creating V5 assay in Seurat Object."},{"path":[]},{"path":[]},{"path":"/articles/CHOIR.html","id":"seurat","dir":"Articles","previous_headings":"Advanced Options > Input object types","what":"Seurat","title":"CHOIR","text":"Seurat objects, default assay used input provided parameter use_assay. input provided parameter use_slot, following default slot (Seurat v4) layer (Seurat v5) used: use_assay either “RNA” “sketch”, CHOIR look data slot use_assay either “SCT” “integrated”, CHOIR look scale.data slot default dimensionality reduction method Seurat objects ‘PCA’, except case ATAC-seq data, ‘LSI’. like use SCTransform normalization rather log normalization, please provide raw counts set parameter normalization_method ‘SCTransform’. Note SCTransform thoroughly tested CHOIR.","code":""},{"path":"/articles/CHOIR.html","id":"singlecellexperiment","dir":"Articles","previous_headings":"Advanced Options > Input object types","what":"SingleCellExperiment","title":"CHOIR","text":"SingleCellExperiment objects, use_assay parameter needed. provided, set ‘logcounts’. default dimensionality reduction method Seurat objects ‘PCA’, except case ATAC-seq data, ‘LSI’.","code":""},{"path":"/articles/CHOIR.html","id":"archr","dir":"Articles","previous_headings":"Advanced Options > Input object types","what":"ArchR","title":"CHOIR","text":"ArchR objects, input provided parameter ArchR_matrix, “TileMatrix” used. input parameter ArchR_depthcol provided, “nFrags” used. default dimensionality reduction method ArchR objects ‘IterativeLSI’.","code":""},{"path":[]},{"path":"/articles/CHOIR.html","id":"batch-correction","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Batch correction","title":"CHOIR","text":"datasets multiple batches, recommended apply Harmony batch correction CHOIR setting parameter batch_correction_method ‘Harmony’. generates Harmony-corrected dimnesionality reductions, ensures random forest classifer comparisons batch-aware. Use caution applying method groups interest (e.g., disease vs. control) batch-confounded expect cell types unique groups.","code":""},{"path":"/articles/CHOIR.html","id":"significance-level-multiple-comparison-correction","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Significance level & multiple comparison correction","title":"CHOIR","text":"default significance level used CHOIR \\(\\alpha = 0.05\\) Bonferroni multiple comparison correction. correction methods may less conservative, CHOIR applies filters reduce total number tests performed (see ).","code":""},{"path":"/articles/CHOIR.html","id":"filters","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Filters","title":"CHOIR","text":"CHOIR uses various filters reduce number necessary permutation test comparisons: Parameter min_accuracy indicates minimum accuracy random forest classifier predictions, clusters automatically merged. defaults 0.5, higher values identify conservative set clusters. Parameter min_connections indicates minimum number nearest neighbors two clusters considered ‘adjacent’. non-zero, non-adjacent clusters never merged. Defaults 1. Parameter max_repeat_errors used account situations random forest classifier prediction errors concentrated among cells repeatedly misassigned (often doublets outliers). non-zero, repeated errors evaluated accuracy scores modified number repeated errors value max_repeat_errors. Defaults 20. Parameter distance_awareness represents distance threshold cluster merge another cluster. Specifically, value multiplier applied distance cluster closest distinguishable neighbor; product sets threshold subsequent comparisons. default value sets threshold 2-fold increase distance.","code":""},{"path":"/articles/CHOIR.html","id":"downsampling","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Downsampling","title":"CHOIR","text":"CHOIR uses downsampling increase efficiency larger datasets. Datasets 5000 cells automatically downsampled according size. Downsampling occurs random forest classifer comparison, using default parameter setting downsampling_rate = \"auto\". Additional downsampling can imposed using parameter sample_max, indicating maximum number cells used per cluster train/test random forest classifier. default value cap number cells used.","code":""},{"path":"/articles/CHOIR.html","id":"providing-pre-generated-clusters","dir":"Articles","previous_headings":"Advanced Options","what":"Providing pre-generated clusters","title":"CHOIR","text":"users already set clusters generated different tool, wish assess whether clusters - -clustered, need pruneTree() function. pruneTree(), provide: object input object results stored. cluster_tree dataframe containing cluster IDs cell across levels hierarchical clustering tree. can generated single level clusters using function createHierachy() (DEVELOPMENT). input_matrix matrix containing feature x cell data train random forest classifiers. nn_matrix matrix containing nearest neighbor adjacency cells. Either reduction (matrix dimensionality reduction cell embeddings) using approximate distances dist_matrix (distance matrix cell cell distances)","code":""},{"path":"/articles/CHOIR.html","id":"using-choir-with-atac-seq-data","dir":"Articles","previous_headings":"Advanced Options","what":"Using CHOIR with ATAC-seq data","title":"CHOIR","text":"input data ATAC-seq data, make sure set input parameter atac TRUE, order use correct defaults. example, CHOIR uses 25000 variable features default ATAC-seq data, comparison 2000 default data. data exclusively contains ATAC-seq data (modalities), recommended set parameter use_variance FALSE.","code":""},{"path":"/articles/CHOIR.html","id":"using-choir-with-multi-modal-data","dir":"Articles","previous_headings":"Advanced Options","what":"Using CHOIR with multi-modal data","title":"CHOIR","text":"providing input data contains multiple modalities cell, RNA + ATAC multiome data, must provide multiple values (vector) parameters use_assay use_slot (Seurat objects), use_assay (SingleCellExperiment objects), ArchR_matrixand ArchR_depthcol ArchR objects. want use different methods normalization, dimensionality reduction, number variable features, batch correction modality, input related parameters must also provided vectors lists one value per modality. CHOIR creates joint dimensionality reduction modalities uses provided feature matrices joint input train/test random forest classifiers.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cathrine Petersen. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Petersen C (2023). CHOIR: Clustering Hierachy Optimization Iterative Random forests. R package version 0.1.0.","code":"@Manual{,   title = {CHOIR: Clustering Hierachy Optimization by Iterative Random forests},   author = {Cathrine Petersen},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clustering Hierachy Optimization by Iterative Random forests","text":"install package, please use following:","code":"remotes::install_github(\"corceslab/CHOIR\", ref=\"main\", repos = BiocManager::repositories(), upgrade = \"never\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Clustering Hierachy Optimization by Iterative Random forests","text":"Please follow vignette. Alternately, install package build_vignettes = TRUE, follows: access vignette running:","code":"remotes::install_github(\"corceslab/CHOIR\", ref=\"main\", repos = BiocManager::repositories(), upgrade = \"never\", build_vignettes = TRUE) vignette(\"CHOIR\")"},{"path":"/reference/CHOIR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CHOIR: Clustering Hierachy Optimization by Iterative Random forests — CHOIR-package","title":"CHOIR: Clustering Hierachy Optimization by Iterative Random forests — CHOIR-package","text":"CHOIR clustering algorithm single-cell sequencing data. CHOIR applies framework permutation tests random forest classifiers across hierarchical clustering tree statistically determine clusters represent distinct populations.","code":""},{"path":"/reference/CHOIR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CHOIR: Clustering Hierachy Optimization by Iterative Random forests — CHOIR-package","text":"Maintainer: Cathrine Petersen cathrine.petersen@gladstone.ucsf.edu (ORCID)","code":""},{"path":"/reference/CHOIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Run CHOIR clustering — CHOIR","title":"Run CHOIR clustering — CHOIR","text":"function constructs hierarchical clustering tree starting single cluster encompassing cells. First, root tree constructed, subtrees subsequently generated. branch subdivided cases underclustering eliminated. , CHOIR move iteratively provided hierarchical clustering tree, use permutation tests random forest classifier prediction accuracies identify clusters merged, order identify robust final clusters.","code":""},{"path":"/reference/CHOIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run CHOIR clustering — CHOIR","text":"","code":"CHOIR(   object,   key = \"CHOIR\",   alpha = 0.05,   p_adjust = \"bonferroni\",   feature_set = \"var\",   exclude_features = NULL,   n_iterations = 100,   n_trees = 50,   use_variance = TRUE,   min_accuracy = 0.5,   min_connections = 1,   max_repeat_errors = 20,   distance_approx = TRUE,   distance_awareness = 2,   collect_all_metrics = FALSE,   sample_max = Inf,   downsampling_rate = \"auto\",   max_clusters = \"auto\",   min_cluster_depth = 2000,   normalization_method = \"none\",   subtree_reductions = TRUE,   reduction_method = NULL,   reduction_params = list(),   n_var_features = NULL,   batch_correction_method = \"none\",   batch_correction_params = list(),   batch_labels = NULL,   neighbor_params = list(),   cluster_params = list(algorithm = 1, group.singletons = TRUE),   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   ArchR_depthcol = NULL,   reduction = NULL,   var_features = NULL,   atac = FALSE,   n_cores = NULL,   random_seed = 1,   verbose = TRUE )"},{"path":"/reference/CHOIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run CHOIR clustering — CHOIR","text":"object object class 'Seurat', 'SingleCellExperiment', 'ArchRProject'. key name CHOIR-related data run stored object. Defaults 'CHOIR'. alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. p_adjust string indicating multiple comparison adjustment use. Permitted values 'fdr', 'bonferroni', 'none'. Defaults 'bonferroni'. feature_set string indicating whether train random forest classifiers '' features variable ('var') features. Defaults 'var'. exclude_features character vector indicating features excluded input random forest classifier. Default = NULL exclude features. n_iterations numeric value indicating number iterations run permutation test comparison. Defaults 100. n_trees numeric value indicating number trees random forest. Defaults 50. use_variance boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. min_accuracy numeric value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5. min_connections numeric value indicating minimum number nearest neighbors two clusters considered 'adjacent'. Non-adjacent clusters merged. Defaults 1. max_repeat_errors Used account situations random forest classifier errors concentrated among cells repeatedly misassigned. Numeric value indicating maximum number 'repeat errors' taken account. set 0, 'repeat errors' evaluated. Defaults 20. distance_approx boolean value indicating whether use approximate distance calculations. Default = TRUE use centroid-based distances. distance_awareness omit distance calculations, set FALSE. Otherwise, numeric value representing distance threshold cluster merge another cluster. Specifically, value multiplier applied distance cluster closest distinguishable neighbor, giving threshold. Default = 2 sets threshold 2-fold increase distance. collect_all_metrics boolean value indicating whether collect save additional metrics random forest classifiers, including feature importances tree depth. Defaults FALSE. sample_max numeric value indicating maximum number cells used per cluster train/test random forest classifier. Default = Inf cap number cells used. downsampling_rate numeric value indicating proportion cells used per cluster train/test random forest classifier. Default = \"auto\" sets downsampling rate according dataset size, efficiency. max_clusters Indicates extent hierarchical clustering tree expanded. Default = 'auto' expand tree cases underclustering eliminated branches. Alternately, supply numerical value indicating maximum number clusters expand tree . min_cluster_depth numeric value indicating maximum cluster size bottom clustering tree, prior pruning branches. Defaults 2000. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except cases user wishes use Seurat::SCTransform() normalization. Permitted values 'none' 'SCTransform'. Defaults 'none'. subtree_reductions Whether generate new dimensionality reduction subtree. Defaults TRUE. reduction_method character string vector indicating dimensionality reduction method use. Permitted values 'PCA' principal component analysis, 'LSI' latent semantic indexing, 'IterativeLSI' iterative latent semantic indexing. Default = NULL specify method based input data type. reduction_params list additional parameters passed selected dimensionality reduction method. n_var_features numerical value indicating many variable features identify. Default = NULL use 2000 features, 25000 features ATAC-seq data. batch_correction_method character string vector indicating batch correction method use. Permitted values 'Harmony' 'none'. Defaults 'none'. batch_correction_params list additional parameters passed selected batch correction method iteration. applicable 'batch_correction_method' = 'Harmony'. batch_labels applying batch correction, name column containing batch labels. Defaults NULL. neighbor_params list additional parameters passed Seurat::FindNeighbors() (, case multi-modal data Seurat SingleCellExperiment objects, Seurat::FindMultiModalNeighbors()). cluster_params list additional parameters passed Seurat::FindClusters() clustering level tree. Note 'group.singletons' set TRUE, buildTree relabels clusters singleton constitutes cluster. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. Default = NULL choose current active assay Seurat objects log_counts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating slot(s) use provided object. Default = NULL choose slot based selected assay. non-standard assay provided, leave use_slot NULL. ArchR_matrix ArchR objects, character string vector indicating matri(ces) use provided object. Default = NULL use 'TileMatrix' ATAC-seq data 'GeneExpressionMatrix' RNA-seq data. ArchR_depthcol ArchR objects, character string vector indicating column use correlation sequencing depth. Default = NULL use 'nFrags' column ATAC-seq data 'Gex_nUMI' RNA-seq data. reduction optional matrix dimensionality reduction cell embeddings used subsequent clustering steps. Defaults NULL, whereby dimensionality reduction(s) calculated using method specified 'reduction_method' part buildTree() function. var_features optional character vector variable features used subsequent clustering steps. Defaults NULL, whereby variable features calculated part buildTree() function. atac boolean value vector indicating whether provided data ATAC-seq data. Defaults FALSE. n_cores numeric value indicating number cores use parallelization. Default = NULL use number available cores minus 2. random_seed numeric value indicating random seed used. verbose boolean value indicating whether use verbose output execution function. Can set FALSE cleaner output.","code":""},{"path":"/reference/CHOIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run CHOIR clustering — CHOIR","text":"Returns object following added data stored provided key: final_clusters Clustering results provided threshold value stepwise_clusters dataframe clustering results progressive step clustering tree provided threshold value comparison_records dataframe recorded comparisons feature_importances 'collect_all_metrics' true, dataframe containing feature importance scores feature across comparisons reduction Cell embeddings calculated dimensionality reductions var_features Variable features calculated dimensionality reductions cell_IDs Cell IDs belonging subtree, applicable graph calculated nearest neighbor shared nearest neighbor adjacency matrices clusters Full hierarchical cluster tree parameters Record parameter values used","code":""},{"path":"/reference/CHOIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run CHOIR clustering — CHOIR","text":"multi-modal data, optionally supply parameter inputs vectors/lists sequentially specify value modality.","code":""},{"path":"/reference/CHOIRpalette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate color palette — CHOIRpalette","title":"Generate color palette — CHOIRpalette","text":"Generate color palette based input number. Hex values standard n = 100, larger values n, generated using Polychrome::createPalette.","code":""},{"path":"/reference/CHOIRpalette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate color palette — CHOIRpalette","text":"","code":"CHOIRpalette(n)"},{"path":"/reference/CHOIRpalette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate color palette — CHOIRpalette","text":"n Number colors","code":""},{"path":"/reference/CHOIRpalette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate color palette — CHOIRpalette","text":"Returns vector n hex values.","code":""},{"path":"/reference/buildTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Build full hierarchical clustering tree — buildTree","title":"Build full hierarchical clustering tree — buildTree","text":"function constructs hierarchical clustering tree starting single cluster encompassing cells. First, parent tree constructed, subtrees subsequently generated. branch subdivided cases underclustering eliminated.","code":""},{"path":"/reference/buildTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build full hierarchical clustering tree — buildTree","text":"","code":"buildTree(   object,   key = \"CHOIR\",   alpha = 0.05,   p_adjust = \"bonferroni\",   feature_set = \"var\",   exclude_features = NULL,   n_iterations = 100,   n_trees = 50,   use_variance = TRUE,   min_accuracy = 0.5,   min_connections = 1,   max_repeat_errors = 20,   distance_approx = TRUE,   sample_max = Inf,   downsampling_rate = \"auto\",   max_clusters = \"auto\",   min_cluster_depth = 2000,   normalization_method = \"none\",   subtree_reductions = TRUE,   reduction_method = NULL,   reduction_params = list(),   n_var_features = NULL,   batch_correction_method = \"none\",   batch_correction_params = list(),   batch_labels = NULL,   neighbor_params = list(),   cluster_params = list(algorithm = 1, group.singletons = TRUE),   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   ArchR_depthcol = NULL,   reduction = NULL,   var_features = NULL,   atac = FALSE,   n_cores = NULL,   random_seed = 1,   verbose = TRUE )"},{"path":"/reference/buildTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build full hierarchical clustering tree — buildTree","text":"object object class 'Seurat' (version, v5 recommended), 'SingleCellExperiment', 'ArchRProject'. key name CHOIR-related data run stored object. Defaults 'CHOIR'. alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. p_adjust string indicating multiple comparison adjustment use. Permitted values 'fdr', 'bonferroni', 'none'. Defaults 'bonferroni'. classifiers '' features variable ('var') features. Defaults 'var'. feature_set string indicating whether train random forest exclude_features character vector indicating features excluded input random forest classifier. Default = NULL exclude features. n_iterations numeric value indicating number iterations run permutation test comparison. Defaults 100. n_trees numeric value indicating number trees random forest. Defaults 50. use_variance boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. ATAC-seq data supplied, recommended set FALSE. min_accuracy numeric value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5. min_connections numeric value indicating minimum number nearest neighbors two clusters considered 'adjacent'. Non-adjacent clusters merged. Defaults 1. max_repeat_errors Used account situations random forest classifier errors concentrated among cells repeatedly misassigned. Numeric value indicating maximum number 'repeat errors' taken account. set 0, 'repeat errors' evaluated. Defaults 20. distance_approx boolean value indicating whether use approximate distance calculations. Default = TRUE use centroid-based distances. sample_max numeric value indicating maximum number cells used per cluster train/test random forest classifier. Default = Inf cap number cells used. downsampling_rate numeric value indicating proportion cells used per cluster train/test random forest classifier. Default = \"auto\" sets downsampling rate according dataset size, efficiency. max_clusters Indicates extent hierarchical clustering tree expanded. Default = 'auto' expand tree cases underclustering eliminated branches. Alternately, supply numerical value indicating maximum number clusters expand tree . min_cluster_depth numeric value indicating maximum cluster size bottom clustering tree, prior pruning branches. Defaults 2000. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except cases user wishes use Seurat::SCTransform() normalization. Permitted values 'none' 'SCTransform'. Defaults 'none'. subtree_reductions Whether generate new dimensionality reduction subtree. Defaults TRUE. reduction_method character string vector indicating dimensionality reduction method use. Permitted values 'PCA' principal component analysis, 'LSI' latent semantic indexing, 'IterativeLSI' iterative latent semantic indexing. Default = NULL specify method based input data type. reduction_params list additional parameters passed selected dimensionality reduction method. n_var_features numerical value indicating many variable features identify. Default = NULL use 2000 features, 25000 features ATAC-seq data. batch_correction_method character string vector indicating batch correction method use. Permitted values 'Harmony' 'none'. Defaults 'none'. batch_correction_params list additional parameters passed selected batch correction method iteration. applicable 'batch_correction_method' = 'Harmony'. batch_labels applying batch correction, name column containing batch labels. Defaults NULL. neighbor_params list additional parameters passed Seurat::FindNeighbors() (, case multi-modal data Seurat SingleCellExperiment objects, Seurat::FindMultiModalNeighbors()). cluster_params list additional parameters passed Seurat::FindClusters() clustering level tree. Note 'group.singletons' set TRUE, clusters relabeled singleton constitutes cluster. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. Default = NULL choose current active assay Seurat objects log_counts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating slot(s) (Seurat v4) layer(s) (Seurat v5) use provided object. Default = NULL choose slot/layer based selected assay. non-standard assay provided, leave use_slot NULL. ArchR_matrix ArchR objects, character string vector indicating matri(ces) use provided object. Default = NULL use 'TileMatrix' ATAC-seq data 'GeneExpressionMatrix' RNA-seq data. ArchR_depthcol ArchR objects, character string vector indicating column use correlation sequencing depth. Default = NULL use 'nFrags' column ATAC-seq data 'Gex_nUMI' RNA-seq data. reduction optional matrix dimensionality reduction cell embeddings used subsequent clustering steps. Defaults NULL, whereby dimensionality reduction(s) calculated using method specified 'reduction_method' part buildTree() function. var_features optional character vector variable features used subsequent clustering steps. Defaults NULL, whereby variable features calculated part buildTree() function. atac boolean value vector indicating whether provided data ATAC-seq data. Defaults FALSE. n_cores numeric value indicating number cores use parallelization. Default = NULL use number available cores minus 2. random_seed numeric value indicating random seed used. verbose boolean value indicating whether use verbose output execution function. Can set FALSE cleaner output.","code":""},{"path":"/reference/buildTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build full hierarchical clustering tree — buildTree","text":"Returns object following added data stored provided key: reduction Cell embeddings calculated dimensionality reductions var_features Variable features calculated dimensionality reductions cell_IDs Cell IDs belonging subtree, applicable graph calculated nearest neighbor shared nearest neighbor adjacency matrices clusters Full hierarchical cluster tree parameters Record parameter values used","code":""},{"path":"/reference/buildTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build full hierarchical clustering tree — buildTree","text":"multi-modal data, optionally supply parameter inputs vectors/lists sequentially specify value modality.","code":""},{"path":"/reference/compareClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare any two clusters using CHOIR's random forest classifier permutation testing approach — compareClusters","title":"Compare any two clusters using CHOIR's random forest classifier permutation testing approach — compareClusters","text":"function take two provided clusters assess whether distinguishable permutation test using random forest classifier prediction accuracies.","code":""},{"path":"/reference/compareClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare any two clusters using CHOIR's random forest classifier permutation testing approach — compareClusters","text":"","code":"compareClusters(   object = NULL,   key = \"CHOIR\",   cluster1_cells = NULL,   cluster2_cells = NULL,   ident1 = NULL,   ident2 = NULL,   group_by = NULL,   alpha = 0.05,   feature_set = \"var\",   var_features = NULL,   exclude_features = NULL,   n_iterations = 100,   n_trees = 50,   use_variance = TRUE,   min_accuracy = 0.5,   min_connections = 1,   max_repeat_errors = 20,   collect_all_metrics = FALSE,   sample_max = Inf,   downsampling_rate = \"auto\",   normalization_method = \"none\",   batch_labels = NULL,   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   atac = FALSE,   input_matrix = NULL,   nn_matrix = NULL,   n_cores = NULL,   random_seed = 1,   verbose = TRUE )"},{"path":"/reference/compareClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare any two clusters using CHOIR's random forest classifier permutation testing approach — compareClusters","text":"object object class 'Seurat', 'SingleCellExperiment', 'ArchRProject'. used values provided parameters 'input_matrix' 'nn_matrix'. key name CHOIR-related data retrieved object. Defaults 'CHOIR'. used values provided parameters 'input_matrix' 'nn_matrix'. cluster1_cells character vector cell names belonging cluster 1. cluster2_cells character vector cell names belonging cluster 2. ident1 string indicating label cluster 1. ident2 string indicating label cluster 2. group_by string indicating column cluster labels 'ident1' 'ident2' belong . alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. feature_set string indicating whether train random forest classifiers '' features variable ('var') features. Defaults 'var'. var_features optional character vector variable features used random forest comparisons. Defaults NULL. exclude_features character vector indicating features excluded input random forest classifier. Default = NULL exclude features. n_iterations numeric value indicating number iterations run permutation test comparison. Defaults 100. n_trees numeric value indicating number trees random forest. Defaults 50. use_variance boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. min_accuracy numeric value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5. min_connections numeric value indicating minimum number nearest neighbors two clusters considered 'adjacent'. Non-adjacent clusters merged. Defaults 0. max_repeat_errors Used account situations random forest classifier errors concentrated among cells repeatedly misassigned. Numeric value indicating maximum number 'repeat errors' taken account. set 0, 'repeat errors' evaluated. Defaults 20. collect_all_metrics boolean value indicating whether collect save additional metrics random forest classifiers, including feature importances tree depth. Defaults FALSE. sample_max numeric value indicating maximum number cells used per cluster train/test random forest classifier. Default = Inf cap number cells used. downsampling_rate numeric value indicating proportion cells used per cluster train/test random forest classifier. Default = \"auto\" sets downsampling rate according dataset size, efficiency. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except cases user wishes use Seurat::SCTransform() normalization. Permitted values 'none' 'SCTransform'. Defaults 'none'. batch_labels applying batch correction, name column containing batch labels. Defaults NULL. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. Default = NULL choose current active assay Seurat objects log_counts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating slot(s) (Seurat v4) layer(s) (Seurat v5) use provided object. Default = NULL choose slot/layer based selected assay. non-standard assay provided, leave use_slot NULL. ArchR_matrix ArchR objects, character string vector indicating matri(ces) use provided object. Default = NULL use 'TileMatrix' ATAC-seq data 'GeneExpressionMatrix' RNA-seq data. atac boolean value vector indicating whether provided data ATAC-seq data. Defaults FALSE. input_matrix optional matrix containing feature x cell data train random forest classifiers. Default = NULL use feature x cell matri(ces) indicated function buildTree(). nn_matrix optional matrix containing nearest neighbor adjacency cells. Default = NULL look adjacency matri(ces) generated function buildTree(). n_cores numeric value indicating number cores use parallelization. Default = NULL use number available cores minus 2. random_seed numeric value indicating random seed used. verbose boolean value indicating whether use verbose output execution function. Can set FALSE cleaner output.","code":""},{"path":"/reference/compareClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare any two clusters using CHOIR's random forest classifier permutation testing approach — compareClusters","text":"Returns list containing following elements: comparison_result string, either \"merge\" \"split\", indicating result comparison. comparison_records dataframe including metrics recorded comparison feature_importances 'collect_all_metrics' true, dataframe containing feature importance scores gene comparison","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plotCHOIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"Dimensional reduction plot CHOIR clusters labeled","code":""},{"path":"/reference/plotCHOIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"","code":"plotCHOIR(   object,   key = \"CHOIR\",   reduction = NULL,   cells = NULL,   legend = TRUE,   accuracy_scores = FALSE,   plot_nearest = TRUE,   ... )"},{"path":"/reference/plotCHOIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"object object class 'Seurat', 'SingleCellExperiment', 'ArchRProject' undergone CHOIR clustering. key name CHOIR-related data run retrieved object. Defaults 'CHOIR'. reduction character vector indicating CHOIR subtree dimensionality reduction plot (e.g., 'P0_reduction_UMAP', 'P1_reduction_UMAP'). Default = NULL plot UMAP 'P0_reduction_UMAP' generated CHOIR. cells Vector cell names plot. Default cells. legend boolean value indicating whether include legend. Defaults TRUE. accuracy_scores boolean value indicating whether overlay pairwise cluster comparison accuracy scores onto UMAP. Default = TRUE. plot_nearest boolean value indicating whether plot accuracy score cluster's nearest neighboring cluster. relevant accuracy_scores TRUE. Defaults TRUE. ... Extra parameters passed Seurat::DimPlot()","code":""},{"path":"/reference/plotCHOIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"ggplot object.","code":""},{"path":"/reference/pruneTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Prune clustering tree using random forest classifiers — pruneTree","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"function move iteratively provided hierarchical clustering tree, use permutation tests random forest classifier prediction accuracies identify clusters merged, order identify robust final clusters.","code":""},{"path":"/reference/pruneTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"","code":"pruneTree(   object,   key = \"CHOIR\",   alpha = NULL,   p_adjust = NULL,   feature_set = NULL,   exclude_features = NULL,   n_iterations = NULL,   n_trees = NULL,   use_variance = NULL,   min_accuracy = NULL,   min_connections = NULL,   max_repeat_errors = NULL,   distance_approx = NULL,   distance_awareness = 2,   collect_all_metrics = FALSE,   sample_max = NULL,   downsampling_rate = NULL,   normalization_method = NULL,   batch_correction_method = NULL,   batch_labels = NULL,   cluster_params = NULL,   use_assay = NULL,   cluster_tree = NULL,   input_matrix = NULL,   nn_matrix = NULL,   dist_matrix = NULL,   reduction = NULL,   n_cores = NULL,   random_seed = NULL,   verbose = TRUE )"},{"path":"/reference/pruneTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"object object class 'Seurat', 'SingleCellExperiment', 'ArchRProject'. key name CHOIR-related data run stored object. Defaults 'CHOIR'. alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. p_adjust string indicating multiple comparison adjustment use. Permitted values 'fdr', 'bonferroni', 'none'. Defaults 'bonferroni'. feature_set string indicating whether train random forest classifiers '' features variable ('var') features. Defaults 'var'. exclude_features character vector indicating features excluded input random forest classifier. Default = NULL exclude features. n_iterations numeric value indicating number iterations run permutation test comparison. Defaults 100. n_trees numeric value indicating number trees random forest. Defaults 50. use_variance boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. ATAC-seq data supplied, recommended set FALSE. min_accuracy numeric value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5. min_connections numeric value indicating minimum number nearest neighbors two clusters considered 'adjacent'. Non-adjacent clusters merged. Defaults 1. max_repeat_errors Used account situations random forest classifier errors concentrated among cells repeatedly misassigned. Numeric value indicating maximum number 'repeat errors' taken account. set 0, 'repeat errors' evaluated. Defaults 20. distance_approx boolean value indicating whether use approximate distance calculations. Default = TRUE use centroid-based distances. distance_awareness omit distance calculations, set FALSE. Otherwise, numeric value representing distance threshold cluster merge another cluster. Specifically, value multiplier applied distance cluster closest distinguishable neighbor, giving threshold. Default = 2 sets threshold 2-fold increase distance. collect_all_metrics boolean value indicating whether collect save additional metrics random forest classifiers, including feature importances tree depth. Defaults FALSE. sample_max numeric value indicating maximum number cells used per cluster train/test random forest classifier. Default = Inf cap number cells used. downsampling_rate numeric value indicating proportion cells used per cluster train/test random forest classifier. Default = \"auto\" sets downsampling rate according dataset size, efficiency. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except cases user wishes use Seurat::SCTransform() normalization. Permitted values 'none' 'SCTransform'. Defaults 'none'. batch_correction_method character string vector indicating batch correction method use. Permitted values 'Harmony', 'VAE', 'none'. Defaults 'none'. batch_labels applying batch correction, name column containing batch labels. Defaults NULL. cluster_params list additional parameters passed Seurat::FindClusters() clustering level tree. Note 'group.singletons' set TRUE, clusters relabeled singleton constitutes cluster. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. Default = NULL choose current active assay Seurat objects log_counts assay SingleCellExperiment objects. cluster_tree optional dataframe containing cluster IDs cell across levels hierarchical clustering tree. Default = NULL use hierarchical clustering tree generation function buildTree(). input_matrix optional matrix containing feature x cell data train random forest classifiers. Default = NULL use feature x cell matri(ces) indicated function buildTree(). nn_matrix optional matrix containing nearest neighbor adjacency cells. Default = NULL look adjacency matri(ces) generated function buildTree(). dist_matrix optional distance matrix cell cell distances (based dimensionality reduction cell embeddings). Default = NULL look distance matri(ces) generated function buildTree(). reduction optional matrix dimensionality reduction cell embeddings used distance calculations. Defaults = NULL look dimensionality reductions generated function buildTree(). n_cores numeric value indicating number cores use parallelization. Default = NULL use number available cores minus 2. random_seed numeric value indicating random seed used. verbose boolean value indicating whether use verbose output execution function. Can set FALSE cleaner output.","code":""},{"path":"/reference/pruneTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"Returns object following added data stored provided key: final_clusters Clustering results provided threshold value stepwise_clusters dataframe clustering results progressive step clustering tree provided threshold value comparison_records dataframe recorded comparisons feature_importances 'collect_all_metrics' true, dataframe containing feature importance scores feature across comparisons","code":""},{"path":"/reference/runCHOIRumap.html","id":null,"dir":"Reference","previous_headings":"","what":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"Run UMAP CHOIR dimensionality reductions","code":""},{"path":"/reference/runCHOIRumap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"","code":"runCHOIRumap(object, key = \"CHOIR\", reduction = NULL)"},{"path":"/reference/runCHOIRumap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"object object class 'Seurat', 'SingleCellExperiment', 'ArchRProject' undergone CHOIR clustering. key name CHOIR-related data run retrieved object. Defaults 'CHOIR'. reduction character vector indicating CHOIR subtree dimensionality reduction run UMAP (e.g., 'P0_reduction', 'P1_reduction'). Default = NULL run UMAP dimensionality reductions generated CHOIR stored provided 'key'.","code":""},{"path":"/reference/runCHOIRumap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"Returns object following added data stored provided key: reduction Cell embeddings calculated dimensionality reductions","code":""},{"path":"/news/index.html","id":"choir-010","dir":"Changelog","previous_headings":"","what":"CHOIR 0.1.0","title":"CHOIR 0.1.0","text":"Added NEWS.md file track changes package. Added R scripts. Added documentation & vignette. Added pkgdown site.","code":""}]
